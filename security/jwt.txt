# JWT(Json Web Token)
- JWT(Json Web Token)은 Json 객체에 인증에 필요한 정보들을 담은 후 비밀키로 서명한 토큰으로, 인터넷 표준 인증 방식이다. 공식적으로 인증(Authentication) & 권한허가(Authorization) 방식으로 사용된다.

# JWT 프로세스
1. 사용자가 로그인
2. 서버는 비밀키로 JWT 생성
3. JWT Token 전달
4. 사용자는 API 요청시마다 헤더에 JWT 전달
5. 서버는 API의 헤더를 확인하여 신뢰할만한 사용자인지 체크한다
6. API 응답
> 매번 API 요청시마다 JWT를 보내는 이유는 Http의 특성인
> Connectionless : 한 번 통신이 이뤄지고 난 후에 연결이 바로 끊어진다
> Stateless : 이전 상태를 유지/기억하지 않는다
> 따라서 매 연결시 인증을 해줘야함

# JWT 구조
- Header : Signature에서 사용하는 알고리즘(대표적으로 RS256, HS256), 토큰 타입
- Payload : sub(제목), aud(audiece, 대상자), iat(issued at, 토큰 발행시간), exp(토큰 만료시간)
- Signature : 헤더와 페이로드의 문자열을 합친다음 알고리즘과 key를 사용해 암호화한값
>Header와 Payload는 단순히 Base64url로 인코딩되어 있어 누구나 쉽게 복호화할 수 있지만, Signature는 key가 없으면 복호화할 수 없다. 이를 통해 보안상 안전하다는 특성을 가질 수 있게 되었다.

# 장점
- 로컬에 저장하기 때문에 서버 용량에 영향을 끼치거나 받지 않는다.
- 보다 안전하다. (공개키/개인키 or 비밀키를 통해 서명되기 때문에)
- 모바일 앱에서 사용하기 적합하다.
> 모바일 앱은 여러 플랫폼 및 기기에서 동작할 수 있고, 서로 다른 도메인에서 통신할 수도 있다. 이때 JWT를 사용하면 플랫폼 독립적으로 사용자 인증을 처리할 수 있기 때문에 적합하다.
- 네트워크 부하가 적다.
> http헤더나 url 파라미터를 통해 간단하게 전송되기 때문이다.

# 단점
- 토큰의 크기가 커질수록 트래픽에 영향을 미칠 수 있다.
- 토큰은 발급되면 만료 기간 변경이 불가능하므로 토큰 만료 처리를 구현해야 한다.